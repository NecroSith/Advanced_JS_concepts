Javascript has its own runtime
which is the environment where all actions in browser (but not only there!) on the page happen with the help of js engine

It includes call stack and memory heap
It has Web API which handles al the events and interactions on the page
By calling "window" object we can see all the methods in Web API
to do all the stuff in the background, JS engine uses low level languages like C++ under the hood

for example

console.log(1);
setTimeout(() => {console.log(2)}, 1000);
console.log(3);

Will output
1
3
2

because the first one will be console.log(1), its okay
then js engine sees "setTimeout" function and passes it to Web API, as it's a part of it
after it js engine will go ahead and print 3 from console.log(3)
Meanwhile, Web API call setTimeout and after 1000 ms it will call a callback with console.log(2)
this call goes to the callback queue and through event loop it get to the call stack

/ No matter how fast setTimeout is, it can be 0, the result will be the same as it's in any case placed to Web API and callback queue after executing in Web API

Node JS has it's own js runtime with "global" object instead of "window"